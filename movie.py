# -*- coding: utf-8 -*-
"""Movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12J10PDdwgA068mIMeLBog9QT7M0Kzv3A
"""

# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as seab
import plotly.express as px
from wordcloud import WordCloud
from sklearn.preprocessing import OrdinalEncoder, StandardScaler, PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import mean_squared_error, r2_score as score
from sklearn.ensemble import RandomForestRegressor

# Read Data
df = pd.read_csv('/content/Movies.csv', encoding='latin-1')

df.head

# Data Cleaning and Preprocessing
df.dropna(axis=0, inplace=True)
df.drop_duplicates(inplace=True)

# Extracting relevant information from columns
df['Duration'] = df['Duration'].str.extract('(\d+)').astype(float)
df['Votes'] = pd.to_numeric(df['Votes'].str.replace(',', ''), errors='coerce')
df['Year'] = df['Year'].str.extract('(\d+)').astype(float)

# Exploratory Data Analysis
ax = seab.lineplot(data=df['Year'].value_counts().sort_index())
tick_positions = range(int(min(df['Year'])), int(max(df['Year'])) + 1, 5)
ax.set_title("Annual Movie Release Counts Over Time")
ax.set_xticks(tick_positions)
ax.set_xticklabels(tick_positions, rotation=90)
ax.set_xlabel("Years")
ax.set_ylabel("Count")

# Outlier Analysis
Q1 = df['Duration'].quantile(0.25)
Q3 = df['Duration'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df = df[(df['Duration'] >= lower_bound) & (df['Duration'] <= upper_bound)]

# Machine Learning
Input = df.drop(['Name', 'Genre', 'Rating', 'Director', 'Actor 1', 'Actor 2', 'Actor 3'], axis=1)
Output = df['Rating']
x_train, x_test, y_train, y_test = train_test_split(Input, Output, test_size=0.2, random_state=1)

# Define the evaluate_model function
def evaluate_model(y_true, y_pred, model_name):
    from sklearn.metrics import mean_squared_error, r2_score as score
    print("Model: ", model_name)
    print("Accuracy = {:0.2f}%".format(score(y_true, y_pred)*100))
    print("Mean Squared Error = {:0.2f}\n".format(mean_squared_error(y_true, y_pred, squared=False)))
    return round(score(y_true, y_pred)*100, 2)

# Random Forest Regression
RFR = RandomForestRegressor(random_state=1)
RFR.fit(x_train, y_train)
rfr_preds = RFR.predict(x_test)
RFRScore = evaluate_model(y_test, rfr_preds, "RANDOM FOREST REGRESSION")

# Decision Tree Regression
DTR = DecisionTreeRegressor(random_state=1)
DTR.fit(x_train, y_train)
dt_preds = DTR.predict(x_test)
DTScore = evaluate_model(y_test, dt_preds, "DECISION TREE")

